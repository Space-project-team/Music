server:
  port: 9091
  servlet:
    context-path: /music-manager
  tomcat:
    accesslog:
      buffered: true
      directory: /home/log/tomcat
      enabled: true
      file-date-format: .yyyy-MM-dd
      pattern: '%t | %{X-Real-IP}i | %b | %B | %H | %l | %m | %p | %q | %r | %s | %S | %u | %U | %v | %D | %T | %{Cookie}i | %{User-Agent}i | %{a}r'
      prefix: access_log
      rename-on-rotate: false
      request-attributes-enabled: false
      rotate: true
      suffix: .log
spring:
  #数据源
  application:
    name: support
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    name: test
    url: jdbc:mysql://localhost:3306/music?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
    username: root
    password: ""
    type: com.alibaba.druid.pool.DruidDataSource
  # freemarker 模板引擎
  freemarker:
    cache: false
    charset: UTF-8
    content-type: text/html;charset=UTF-8
    enabled: true
    suffix: .ftl
    template-loader-path: classpath:/views/
    # 配置模板里是否可以直接取request的属性 request是别名
    request-context-attribute: request
    # 配置将request和session中的键值添加到
    # AbstractTemplateView类的renderMergedOutputModel方法中的model这个Map参数中
    expose-request-attributes: true
    expose-spring-macro-helpers: true
    # 配置模板里是否可以直接取session的属性 true 是允许
    expose-session-attributes: true
    settings:
      tag_syntax: auto_detect               # 配置标签语法为自动，页面可以将 <> 改为 []，为了区别 html 标签
      template_update_delay: 0              # 模板更新时间，单位秒
      default_encoding: UTF-8               # 默认编码字符集
      output_encoding: UTF-8                # 模板输出编码字符集
      locale: zh_CN                         # 本地化配置
      date_format: yyyy-MM-dd               # 日期格式化
      time_format: HH:mm:ss                 # 时间格式化
      datetime_format: yyyy-MM-dd HH:mm:ss  # 日期时间格式化
      number_format: #.##                   # 数字格式化
      boolean_format: true,false            # boolean格式化
      # ignore,debug,html_debug,rethrow
      # 1.TemplateExceptionHandler.IGNORE_HANDLER简单地压制所有异常
      # 它对处理异常没有任何作用，也不会重新抛出异常，页面可以正常渲染，后台抛异常
      # 2.TemplateExceptionHandler.DEBUG_HANDLER打印堆栈信息和重新抛出异常。这是默认的异常控制器
      # 3.TemplateExceptionHandler.HTML_DEBUG_HANDLER和DEBUG_HANDLER相同
      # 但是可以格式化堆栈跟踪信息，HTML页面，建议使用它而不是DEBUG_HANDLER
      # 4.TemplateExceptionHandler.RETHROW_HANDLER简单重新抛出所有异常而不会做其他的事情
      # 5.使用自定义异常类实现TemplateExceptionHandler重写handleTemplateException方法
      template_exception_handler: html_debug
  # redis 缓存
  redis:
    timeout: 10000                          # 连接超时时间
    host: 175.24.16.105                    # Redis服务器地址
    port: 6379                              # Redis服务器端口
    database: 0                             # 选择哪个库，默认0库
    lettuce:
      pool:
        max-active: 1024                    # 最大连接数，默认 8
        max-wait: 10000                     # 最大连接阻塞等待时间，单位毫秒，默认 -1
        max-idle: 200                       # 最大空闲连接，默认 8
        min-idle: 5                         # 最小空闲连接，默认 0
    password: root
  # Dubbo
  dubbo:
    #开启dubbo服务
    server: true
    # 提供方应用信息，用于计算依赖关系
    application:
      name: rpc-provider
    # 使用 zookeeper 注册中心暴露服务地址
    registry:
      address: zookeeper://175.24.16.105:9100/
    # 用 dubbo 协议在 20880 端口暴露服务
    protocol:
      name: dubbo
      port: 20881
    # 扫描需要暴露的服务接口包
    scan:
      base-packages: com.music.sso.service
mybatis:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.music.manager.pojo
  # spring boot集成mybatis的方式打印sql，需要使用的话可以开启
#  configuration:
#存储音乐列表
musicLink.list: musicLink
# Redis Key
# myMusic列表 key
mymusic.list.key: mymusic:list
#关闭Elasticsearch健康检查
management:
  health:
    elasticsearch:
      enabled: false